'use-strict'

class DateError extends Error {
    /**
     * Custom error class for the random date application
     * gets the number of the field where the error occurs
     * to show the message in the frontend
     * @param {String} message
     * @param {Number | Number[]} field
     */
    constructor(message, field) {
        super(message)

        this.field = field
    }
}
/**
 * get the number of the month by providing the month as a 3 characters string
 * @param {String} month
 * @returns Number
 */
let monthNumberFromString = month => {
    return new Date(`${month} 01 2000`).toLocaleDateString(`en`, {
        month: `2-digit`,
    })
}

/**
 * Generate a random number between two numbers, including min and excluding max
 * @param {Number} min
 * @param {Number} max
 * @returns Number
 */
const getRandomInteger = (min, max) => {
    return Math.floor(Math.random() * (max - min)) + min
}

/**
 * Fetch public holidays from a public API and return them inside a promise
 * @param {Number} year
 * @returns Promise
 */
const fetchPublicHolidays = async () => {
    const country = 'LU'
    const language = 'EN'
    const start = '2021-01-01'
    const end = '2021-12-31'

    const url = `https://openholidaysapi.org/PublicHolidays?countryIsoCode=${country}&languageIsoCode=${language}&validFrom=${start}&validTo=${end}`

    const res = await fetch(url)
    const data = await res.json()

    let holidays = []

    for (let i = 0; i < data.length; ++i) {
        holidays[i] = new Date(data[i].startDate)
    }

    return holidays
}
class PRNG {
    /**
     * Pseudo random number generator
     * @param {Number} seed
     * @returns Instance of PRNG
     * @see https://en.wikipedia.org/wiki/Pseudorandom_number_generator
     * @see https://en.wikipedia.org/wiki/Mersenne_Twister
     */
    constructor(seed) {
        this._length = 624
        // The array holds the state of the generator
        this.mt = new Array(this._length)
        this.index = 0

        // Initialize the generator and set the first value as seed
        this.mt[0] = seed
        for (let i = 1; i < this._length; i++) {
            // The & 0xffffffff is necessary to get the same results as in the original code
            const prev = this.mt[i - 1]
            // Ensure that the value is different than the previous one
            this.mt[i] = (1812433253 * (prev ^ (prev >> 30)) + i) >>> 0
        }
    }

    /**
     * Generate a random number between two numbers, including min and max
     * @param {Number} min
     * @param {Number} max
     * @returns Number
     * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/random
     */
    next(min, max) {
        // Normalize to [0, 1]
        const randomNumber = this.generateRandomNumber() / 0xffffffff // Max 32-bit unsigned integer
        const range = max - min + 1
        // Round down to the nearest integer
        return Math.floor(randomNumber * range) + min
    }

    generateRandomNumber() {
        if (this.index === 0) {
            this.generateNumbers()
        }

        // Various bit manipulation operations are applied to y to ensure randomness.
        // These operations include bitwise shifting, XOR operations, and logical AND operations.
        // The specific bitwise manipulation is based on the Mersenne Twister algorithm.
        let y = this.mt[this.index]
        y ^= y >> 11
        y ^= (y << 7) & 0x9d2c5680 // 0x9d2c5680 = 2636928640
        y ^= (y << 15) & 0xefc60000 // 0xefc60000 = 4022730752
        y ^= y >> 18

        // If the index reaches the length of the array a new batch of untempered numbers is generated by calling generateNumbers()
        this.index = (this.index + 1) % this._length
        return y
    }

    generateNumbers() {
        // Generate an array of 624 untempered numbers
        // Each iteration mixes bits from the current number with bits from the next number
        for (let i = 0; i < this._length; i++) {
            const y = (this.mt[i] & 0x80000000) + (this.mt[(i + 1) % this._length] & 0x7fffffff) // 0x80000000 = 2147483648, 0x7fffffff = 2147483647
            this.mt[i] = this.mt[(i + 397) % 624] ^ (y >> 1)

            if (y % 2 !== 0) {
                this.mt[i] ^= 0x9908b0df // 0x9908b0df = 2567483615
            }
        }
    }
}
class RandomDateSampler {
    /**
     * Random date constructor class
     * @param {HTMLInputElement} start
     * @param {HTMLInputElement} end
     * @param {HTMLInputElement} batchSize
     * @param {HTMLInputElement} weekend
     * @param {HTMLInputElement} seed
     * @param {NodeList} errorFields
     * @returns RandomDateSampler
     */
    constructor(start, end, batchSize, seed, weekend, errorFields) {
        this._start = start.value.length !== 0 ? new Date(String(start.value)) : undefined
        this._end = end.value.length !== 0 ? new Date(String(end.value)) : undefined
        this._batchSize = +batchSize.value <= 0 ? Math.abs(batchSize.value) : +batchSize.value
        this._seed = +seed.value <= 0 ? Math.abs(seed.value) : +seed.value
        this._prng = new PRNG(this._seed)
        this._weekend = weekend.checked ? true : false
        this._errorFields = errorFields
        this._batch = []
        this._holidays = []
        this._output = []
        this._isError = false
    }

    get error() {
        return this._isError
    }

    checkInput = () => {
        // check if the dates have been provided
        if (!this._start) throw new DateError('Provide a date', 0)
        if (!this._end) throw new DateError('Provide a date', 1)

        // check if the end date is greater than the start date
        if (this._start.valueOf() > this._end.valueOf())
            throw new DateError(
                `${this._end.toString().slice(0, 10)} needs to be greater than ${this._start.toString().slice(0, 10)}`,
                [0, 1]
            )

        // check if the dates have the same value
        if (+this._start === +this._end) throw new DateError('Define a valid range', [0, 1])

        // check if a number is provided
        if (this._batchSize <= 0) throw new DateError('Sample needs to be greater than 0', 2)

        if (this.getDatesInRange(new Date(this._start), new Date(this._end), this._weekend).length < this._batchSize)
            throw new DateError('Extend the time frame or pick a lower sample size', [0, 1, 2, 3])

        // check if the seed is provided
        if (!this._seed) throw new DateError('Provide a seed number', 4)

        // check if the seed is a number
        if (isNaN(this._seed)) throw new DateError('Seed is not a number', 4)
    }

    init() {
        try {
            this.checkInput()
            this._isError = false
        } catch (error) {
            const { message, field } = error

            if (typeof field === 'object') {
                this._isError = true

                field.forEach(e => {
                    this._errorFields[+e].innerHTML = message
                })
            } else {
                this._isError = true
                const n = +field

                this._errorFields[n].innerHTML = message
            }
        }
        if (this._isError) return false
        else return true
    }

    print() {
        return [this._start, this._end, this._seed, this._weekend, this._batchSize, this._errorFields]
    }

    /**
     * Returns all dates between start and end date
     * @param {Date} start
     * @param {Date} end
     * @param {Boolean} excludeWeekend
     * @returns Date[]
     */
    getDatesInRange = (start, end, excludeWeekend) => {
        if (typeof start !== 'object') throw new DateError('DateType', 1)
        if (typeof end !== 'object') throw new DateError('DateType', 2)

        const arr = []

        for (let dt = new Date(start); dt <= new Date(end); dt.setDate(dt.getDate() + 1)) {
            if (excludeWeekend) {
                if (dt.toString().slice(0, 3) !== 'Sat' && dt.toString().slice(0, 3) !== 'Sun') arr.push(new Date(dt))
            } else {
                arr.push(new Date(dt))
            }

            if (!arr?.length) throw new DateError("Couldn't create batch", 2)
        }

        return arr
    }

    /**
     * Create a batch with randomly selected dates of the size n
     * @param {Date[]} dates
     * @param {Number} n
     * @returns Dates[]
     */
    createRandomSampleBatch = (dates, n) => {
        let batch = []
        let seeds = []
        let numDates = dates.length

        for (let i = 0; i < numDates; i++) {
            const seed = this._prng.next(0, numDates - 1)

            // Check if the index of the date has already been picked,
            // since the filtering for dates is unreliable
            if (!seeds.includes(seed)) batch.push(dates[seed])

            if (batch.length === n) break

            seeds.push(seed)
        }

        if (batch.length !== n) throw new DateError('Extend the time frame or pick a lower sample size', 2)

        return batch
    }

    /**
     * Create the output element containing the date batch
     * @returns Object with the HTML elements and the raw dates array
     */
    createOutput = () => {
        let batch = []
        try {
            const dates = this.getDatesInRange(new Date(this._start), new Date(this._end), this._weekend)

            batch = this.createRandomSampleBatch(dates, this._batchSize).sort((a, b) => a - b)
        } catch (error) {
            const { message, field } = error

            this._isError = true

            if (!message || !field) throw new DateError(`${error}`, 2)
            else this._errorFields[+field].innerHTML = message
        }

        const output = []

        batch.forEach(date => {
            let reformattedDate = `${date.toString().slice(8, 10)}/${monthNumberFromString(
                date.toString().slice(4, 8)
            )}/${date.toString().slice(11, 16)}`

            output.push(`<li>${reformattedDate}</li>`)
        })

        return { html_output: output, dates: batch }
    }
}
// Import all HTML elements
const form = document.querySelector('form')
const outputList = document.querySelector('.output-list')
const submitBtn = document.querySelector('button[type="submit"]')
const clipboard = document.querySelector('#clipboard')
const txtBtn = document.querySelector('#txtBtn')
const csvBtn = document.querySelector('#csvBtn')
const jsonBtn = document.querySelector('#jsonBtn')
const outputField = document.querySelectorAll('.hidden')
const errorFields = document.querySelectorAll('.error')

form.addEventListener('submit', e => {
    e.preventDefault()

    const { startDate, endDate, batchSize, seed, weekend } = e.target

    const randomDateSampler = new RandomDateSampler(startDate, endDate, batchSize, seed, weekend, errorFields)
    const initialize = randomDateSampler.init()

    // exit event after unsuccessful initialization
    if (!initialize) return

    const { html_output, dates } = randomDateSampler.createOutput()

    //if (randomDateSampler.error) location.reload()

    // show output field
    if (!randomDateSampler.error || !dates?.length) {
        errorFields.forEach(e => (e.innerHTML = ''))
        outputField.forEach(field => {
            if (field.classList.contains('hidden')) field.classList.remove('hidden')
        })
    }

    outputList.innerHTML = html_output.join(' ')

    // reformat the data for export
    const prepDataExport = dates.map(
        e =>
            `${e.toString().slice(8, 10)}/${monthNumberFromString(e.toString().slice(4, 8))}/${e
                .toString()
                .slice(11, 15)}`
    )

    // different export types
    clipboard.addEventListener('click', async e => {
        e.preventDefault()

        await navigator.clipboard.writeText(prepDataExport.join(',').replace(/,/g, ' '))

        clipboard.innerHTML = 'Copied to clipboard'
    })

    txtBtn.addEventListener('click', e => {
        e.preventDefault()

        saveDataAsTXT('random_dates.txt', prepDataExport.join(',').replaceAll(/,/g, ' '))
    })

    csvBtn.addEventListener('click', e => {
        e.preventDefault()

        saveDataAsCSV('random_dates.csv', prepDataExport.join(',').replaceAll(/,/g, ' '))
    })

    jsonBtn.addEventListener('click', e => {
        e.preventDefault()

        saveDataAsJSON('random_dates.json', JSON.stringify({ dates: prepDataExport }))
    })
})

/**
 * Function to export data as a text file in the browser
 * @param {String} filename
 * @param {String[]} data
 */
const saveDataAsTXT = (filename, data) => {
    const blob = new Blob([data], { type: 'text/plain;charset=utf-8' })
    if (window.navigator.msSaveOrOpenBlob) {
        window.navigator.msSaveBlob(blob, filename)
    } else {
        const tmpAnchor = window.document.createElement('a')
        tmpAnchor.href = window.URL.createObjectURL(blob, { oneTimeOnly: true })
        tmpAnchor.download = filename
        tmpAnchor.click()
        URL.revokeObjectURL(tmpAnchor.href)
    }
}

/**
 * Function to export data as a csv file in the browser
 * @param {String} filename
 * @param {String[]} data
 */
const saveDataAsCSV = (filename, data) => {
    const blob = new Blob([data], { type: 'text/csv;charset=utf-8' })
    if (window.navigator.msSaveOrOpenBlob) {
        window.navigator.msSaveBlob(blob, filename)
    } else {
        const tmpAnchor = window.document.createElement('a')
        tmpAnchor.href = window.URL.createObjectURL(blob, { oneTimeOnly: true })
        tmpAnchor.download = filename
        tmpAnchor.click()
        URL.revokeObjectURL(tmpAnchor.href)
    }
}

/**
 * Function to export data as a json file in the browser
 * @param {String[]} data
 */
const saveDataAsJSON = (filename, data) => {
    const blob = new Blob([data], {
        type: 'text/json;charset=utf-8',
    })

    if (window.navigator.msSaveOrOpenBlob) {
        window.navigator.msSaveBlob(blob, filename)
    } else {
        const tmpAnchor = window.document.createElement('a')
        tmpAnchor.href = window.URL.createObjectURL(blob, {
            oneTimeOnly: true,
        })
        tmpAnchor.download = filename
        tmpAnchor.click()
        URL.revokeObjectURL(tmpAnchor.href)
    }
}

// throws unsafe environment errors
//history.replaceState(null, '', '../index.html')
