class RandomDateSampler{constructor(t,e,r,i,s){this._start=0!==t.value.length?new Date(String(t.value)):void 0,this._end=0!==e.value.length?new Date(String(e.value)):void 0,this._batchSize=+r.value<=0?Math.abs(r.value):+r.value,this._weekend=!!i.checked,this._errorFields=s,this._batch=[],this._output=[],this._isError=!1}get error(){return this._isError}checkInput=()=>{if(!this._start)throw new DateError("Provide a date",0);if(!this._end)throw new DateError("Provide a date",1);if(this._start.valueOf()>this._end.valueOf())throw new DateError(`${this._end.toString().slice(0,10)} needs to be greater than ${this._start.toString().slice(0,10)}`,[0,1]);if(+this._start==+this._end)throw new DateError("Define a valid range",[0,1]);if(this._batchSize<=0)throw new DateError("Sample needs to be greater than 0",2);if(this.getDatesInRange(new Date(this._start),new Date(this._end),this._weekend).length<this._batchSize)throw new DateError("Extend the time frame or pick a lower sample size",[0,1,2,3])};init(){try{this.checkInput(),this._isError=!1}catch(t){const{message:e,field:r}=t;if("object"==typeof r)this._isError=!0,r.forEach((t=>{this._errorFields[+t].innerHTML=e}));else{this._isError=!0;const t=+r;this._errorFields[t].innerHTML=e}}return!this._isError}print(){return[this._start,this._end,this._weekend,this._batchSize]}getDatesInRange=(t,e,r)=>{if("object"!=typeof t)throw new Error("DateType");if("object"!=typeof e)throw new Error("DateType");const i=[];for(let s=new Date(t);s<=new Date(e);s.setDate(s.getDate()+1))r?"Sat"!==s.toString().slice(0,3)&&"Sun"!==s.toString().slice(0,3)&&i.push(new Date(s)):i.push(new Date(s));if(!i?.length)throw new DateError("Couldn't create batch",2);return i};createRandomSampleBatch=(t,e)=>{let r=[],i=[],s=t.length;for(let a=1;a<=s;++a){const a=getRandomInteger(0,s);if(i.includes(a)||r.push(t[a]),r.length===e)break;i.push(a)}if(r.length!==e)throw new DateError("Extend the time frame or pick a lower sample size",2);return r};createOutput=()=>{let t=[];try{const e=this.getDatesInRange(new Date(this._start),new Date(this._end),this._weekend);t=this.createRandomSampleBatch(e,this._batchSize).sort(((t,e)=>t-e))}catch(t){const{message:e,field:r}=t;this._isError=!0,this._errorFields[+r].innerHTML=e}const e=[];return t.forEach((t=>{let r=`${t.toString().slice(8,10)}/${monthNumberFromString(t.toString().slice(4,8))}/${t.toString().slice(11,16)}`;e.push(`<li>${r}</li>`)})),{html_output:e,dates:t}}}